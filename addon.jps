type: install
name: WordPress Migrator Add-On
logo: /images/migrator-logo-addon.svg
description: Migrate your WordPress projects from remote Plesk / cPanel to the Virtuozzo Application Platform for WordPress. This add-on automatically fetches the list of remote projects to help you choose the ones for migration.

baseUrl: https://raw.githubusercontent.com/jelastic-jps/wordpress-import-addon/master

onBeforeInit: | 
  // CHANGE VARIABLES
  const targetUID = 6967;
  
  const envName = "env-111111";
  const ssh_host = "111.111.111.111";
  const ssh_port = 22;
  const ssh_user = "root";
  const ssh_pass = "passwd";
  
  // NOT EDIT 
  // init vars
  var resp, containerID;
  var tableName = "WPMigrator";
  
  // check migrator env
  resp = jelastic.env.control.GetEnvInfo(envName, session);
  if (resp.result != 0) return resp;
  
  for (var i = 0, k = resp.nodes; i < k.length; i++) {
  if (k[i].nodeGroup == 'cp')
    containerID = k[i].id;
  }    
  
  //TODO: handle errors
  // load projects
  var command = "bash /home/jelastic/migrator/migrator.sh getRemoteProjects --ssh-user=" + ssh_user + " --ssh-password=" + ssh_pass + " --ssh-host=" + ssh_host + " --ssh-port=" + ssh_port + " --format=json"; 
  resp = api.env.control.ExecCmdById(envName, session, containerID, toJSON([{ "command": command }]), true);
  if (resp.result != 0) return resp;
  
  resp = jelastic.env.control.ExecCmdById(envName, session, containerID, toJSON([{ command: 'cat /home/jelastic/migrator/projects.json' }]), true);
  if ( resp.result != 0 ) return resp;
  
  var projectList = JSON.parse(resp.responses[0].out);
  var ownerList = prepareOwners(projectList);
  var projectListPrepared = prepareProjects(projectList);
  var projectListPreparedById = prepareProjectsById(ownerList,projectList);
  
  // load subscriptions
  resp = jelastic.administration.subscription.GetSubscriptions({
    appid: "cluster", 
    session: session, 
    uid: targetUID,
    status: "ACTIVE",
    expandFields: "*"
  });
  if ( resp.result != 0 ) return resp;  
  
  var subscriptions = prepareSubscriptions(resp.array);
  
  // utils
  function prepareProjects(values) {
    var aResultValues = [];
    values = values || [];
    
    for (var i = 0, n = values.length; i < n; i++) {
      aResultValues.push({
        caption: values[i].ownerId + "  | " + values[i].siteUrl + getProjectStatusById(values[i].id),
        value: values[i].id
      });
    }
    return aResultValues;
  }
  
  function prepareSubscriptions(values) {
    var aResultValues = [],
        item,
        servicePlanItem;
        
    values = values || [];
   
    for (var i = 0, n = values.length; i < n; i++) {
      item = values[i];
      servicePlanItem = item.items[0];
      
      aResultValues.push({
        caption: item.product.displayName + " - " + servicePlanItem.servicePlan.displayName + "    (" + servicePlanItem.resources.length + "/" + servicePlanItem.quantity + ")",
        value: item.id
      });
    }
    
    return aResultValues;
  }
  
  function getProjectStatusById(projectId) {
    var status = '';
    var resp = api.data.base.GetObjectsByCriteria(tableName, {projectId: projectId}, 0, 1);
    if (resp.result != 0) return resp;
    var data = resp.objects[0] || [];
    if (data.hasOwnProperty('status'))
        status = " - " + data.status;
    return status;
  }
  
  function prepareOwners(values) {
    var aResultValues = [];
    values = values || [];
    var uniqueOwnerIds = new Set();

    values.forEach(obj => { uniqueOwnerIds.add(obj.ownerId); });
    const uniqueOwnerIdsArray = Array.from(uniqueOwnerIds);

    for (var i = 0, n = uniqueOwnerIdsArray.length; i < n; i++) {
      aResultValues.push({
        caption: uniqueOwnerIdsArray[i],
        value:  uniqueOwnerIdsArray[i]
      });
    }
    return aResultValues;
  }

  function prepareProjectsById(owners,projects) {
    var oResultProjects = {}, aValues;
    for (var k = 0, l = owners.length; k < l; k++) {
      aValues = [];
      for (var i = 0, n = projects.length; i < n; i++) {
        if (owners[k].value === projects[i].ownerId) {
          aValues.push({
            caption: projects[i].siteUrl + getProjectStatusById(projects[i].id),
            value: projects[i].id
          });
        }
      }
      oResultProjects[owners[k].value] = aValues;
    }
    return oResultProjects;
  }
  
  // format settings
  var fields = [];
  
  fields.push({
    "caption": "Target User ID",
    "type": "displayfield",
    "tooltip": "",          
    "required": false
  }, {
    "caption": "Target User ID",
    "type": "string",
    "name": "targetUID",
    "required": true,
    "hideLabel": true,
    "default": targetUID
  }, {
    "type": "string",
    "required": false,
    "hideLabel": true,
    "disabled": true,
    "default": jelastic.system.admin.GetUserInfo(appid, session, targetUID).email
  }, {
    "caption": "Subscription",
    "type": "displayfield",
    "tooltip": "Select the subscription for the migrated remote projects.",
    "required": false
  }, {
    "caption": "Subscription",
    "type": "list",
    "tooltip": "Select the subscription for the migrated remote projects.",
    "name": "subscription",
    "required": true,
    "hideLabel": true,
    "values": subscriptions
  }, {
    "type": "separator"
  }, {
    "caption": "Display Projects",
    "type": "list",
    "name": "Display project",
    "required": true,
    "default": "all",
    "values": {
      "all": "All projects",
      "byId": "Projects by Source User ID"
    },
    "showIf": {
      "all": [   
      {
        "caption": "Projects",
        "type": "displayfield",
        "tooltip": "Select the project(s) that you want to migrate.",          
        "required": false
      },{
        "caption": "Projects",
        "type": "list",
        "tooltip": "Select the project(s) that you want to migrate.",          
        "name": "projects",
        "required": true,
        "multiSelect": true,
        "hideLabel": true,
        "values": projectListPrepared
      }
      ],
       "byId": [
        {
          "caption": "Source User ID",
          "type": "list",
          "tooltip": "Select a specific remote user (ID) you want to migrate from.",          
          "name": "users",
          "required": true,
          "values": ownerList
        },{
          "caption": "Projects",
          "type": "displayfield",
          "tooltip": "Select the project(s) that you want to migrate.",          
          "required": false
        },{
          "caption": "Projects",
          "type": "list",
          "tooltip": "Select the project(s) that you want to migrate.",          
          "name": "projects",
          "required": true,
          "multiSelect": true,
          "hideLabel": true,
          "dependsOn": {
            "users" : projectListPreparedById
          }
        }
      ]
    }
  }, {
    "type": "string",    
    "name": "envName",
    "required": true,
    "hidden": true,
    "default": envName
  }, {
    "type": "string",    
    "name": "containerID",
    "required": true,
    "hidden": true,
    "default": containerID
  }, {
    "type": "string",    
    "name": "targetUID",
    "required": true,
    "hidden": true,
    "default": targetUID
  })
  return {
    result: 0,
    settings : {
      fields: fields
    }
  };
targetNodes:
  nodeType:
    - nginxphp
    - nginxphp-dockerized
  
responses:    
  701:
    type: warning
    message: SSH connection is failed. Please check SSH connection details!
    
  702:
    type: warning
    message: WP Toolkit utility isnt activated for this account. Please activate!  
    
  13001:
    type: warning
    message: Subscription not found     
    
  13002:
    type: warning
    message: "Validation: selected project count is greater than free slots in the subscription!"
    
  99:
    type: warning
    message: |
      Errors were discovered during the project migration.
      Please check the **/var/log/migrator.log** log file on master node of CP layer for details.

onInstall:
  - log: '${settings}'
  - deployProjects
  - updateProjectStatuses
  - signout
  - generateReport

globals:
  migration_dir: /home/jelastic/migrator
  wpenv_file: /home/jelastic/migrator/.wpenv
  projects_file: /home/jelastic/migrator/projects.json
  tableName: WPMigrator

actions:
  deployProjects:
    - script: |
        // Signin As Client
        var resp = jelastic.system.admin.SigninAsClient("cluster", session, "${settings.targetUID}");
        if (resp.result != 0) return resp;
        return { result: 0, onAfterReturn: { setGlobals: { userSession: resp.session } } };

    - script: |
        var targetUID = '${settings.targetUID}',
            subscriptionId = '${settings.subscription}',
            projectList = '${settings.projects}'.split(','),
            envName = '${settings.envName}',
            actions = [],
            containerID = '${settings.containerID}',
            parts, projectPHPverion, enginePHP;
            
        function validateInstallationCount(subscription, count) {
          var servicePlanItem,
              availableCount,
              result = { result: 0 };
          
          if (!subscription) {
            return { result: 13001 };
          }
        
          servicePlanItem = subscription.items[0];
          availableCount = servicePlanItem.quantity - servicePlanItem.resources.length;
          
          if (count > availableCount) {
            result = { result: 13002 };
          }
          return result;
        }            
      
        // generate envName
        function generateEnvName() {
          var randomNumber = Math.floor(Math.random() * 90000000) + 10000000;
          return "wp-" + randomNumber;
        }
        
        // load subscription
        resp = jelastic.administration.subscription.GetSubscriptions({
          appid: "cluster", 
          session: session, 
          id: subscriptionId,
          expandFields: "*"
        });
        if (resp.result != 0) return resp; 
        
        // validate count
        resp = validateInstallationCount(resp.array[0], projectList.length);
        if (resp.result != 0) return resp;
           
        var wpenv_file_content = jelastic.env.file.Read(envName, session, '${globals.wpenv_file}', null, null, containerID);
        if (wpenv_file_content.result != 0) return wpenv_file_content;
        var projects_file_content = jelastic.env.file.Read(envName, session, '${globals.projects_file}', null, null, containerID);        
        if (projects_file_content.result != 0) return projects_file_content;
        
        // Getting php version for project by ID
        function getProjectPhpVersionById(projectId) {
          var command = "bash /home/jelastic/migrator/migrator.sh getProjectPhpVersion --instance-id=" + projectId; 
          var resp = api.env.control.ExecCmdById(envName, session, containerID, toJSON([{ "command": command }]), true);
          if (resp.result != 0) return resp;
          var projectPHPverion = resp.responses[0].out;
          var parts = projectPHPverion.split(".");     
          return "php" + parts.slice(0, 2).join(".");
        }

        // Getting disk usage for project by project ID
        function getProjectSizeById(projectId) {
          const defaultSize = 20;
          var command = "bash /home/jelastic/migrator/migrator.sh getProjectSize --instance-id=" + projectId; 
          var resp = api.env.control.ExecCmdById(envName, session, containerID, toJSON([{ "command": command }]), true);
          if (resp.result != 0) return resp;
          var remoteSize = resp.responses[0].out;
          var size = Math.ceil(remoteSize) + defaultSize;
          return size;
        }

        // Getting project name by project ID
        function getProjectNameById(projectId) {
          var command = "bash /home/jelastic/migrator/migrator.sh getProjectName --instance-id=" + projectId; 
          var resp = api.env.control.ExecCmdById(envName, session, containerID, toJSON([{ "command": command }]), true);
          if (resp.result != 0) return resp;
          return resp.responses[0].out;
        }

        // Creating envs and migration projects
        let tableName = "${globals.tableName}";
        let projectEnvName, createObject, diskLimit, projectName;
        let envNames = [];
        for (var i = 0, n = projectList.length; i < n; i ++) {
          enginePHP = getProjectPhpVersionById(projectList[i]);
          diskLimit = getProjectSizeById(projectList[i]);
          projectName = getProjectNameById(projectList[i]);
          projectEnvName = generateEnvName();  
          envNames.push(projectEnvName);
          createObject = api.data.base.CreateObject(tableName, {
            envName: projectEnvName,
            uid: targetUID,
            status: "IN PROGRESS",
            projectId:  projectList[i],
            projectName: projectName
          });   
          if (createObject.result != 0) return createObject;
          
          actions.push({
            jps: "${baseUrl}/scripts/createEnvironment.jps?_r=${fn.random}",
            settings: {
              "master_env": envName,
              "env_name": projectEnvName,
              "php_engine": enginePHP,
              "project_id": projectList[i],
              "wpenv_file_content": wpenv_file_content.body,
              "projects_file_content": projects_file_content.body,
              "subscriptionId": subscriptionId,
              "userSession": "${globals.userSession}",
              "diskLimit": diskLimit,
              "targetUID": targetUID
            }
          });
        }        
        return { result: 0, onAfterReturn: [{ 
        'marketplace.jps.install': actions 
        }, {
          'setGlobals': {
            envNames: envNames.join(",")
          }
        }] };

  updateProjectStatuses:
    - script: |
        let base = api.data.base;
        let targetUID = '${settings.targetUID}';
        let tableName = "${globals.tableName}";
        let userSession = "${globals.userSession}";
        const CP = "cp";
        const count = 100;
        let from = 0;
        let resp, imports = [], out, item, resource, subResource;
        let successEnvs = [], failedEnvs = [];
        let preparedEnvNames = '${globals.envNames}'.split(',');
        let criteria = {
          envName: preparedEnvNames
        };        

        function getProjectNameByEnvName(envName){
          var projectName = '';
          var resp = base.GetObjectsByCriteria(appid, session, tableName, {envName: envName}, 0, 1);
          if (resp.result != 0) return resp;
          var data = resp.objects[0] || [];
          if (data.hasOwnProperty('projectName'))
            projectName = " - " + data.projectName;
          return projectName;
        }

        function formatSuccessText(success, failed) {
          let text = "The following WordPress project(s) have been migrated: \n";
          if (success.length) {
            for (var i = 0, n = successEnvs.length; i < n; i ++) {
              text += getProjectNameByEnvName(successEnvs[i]) + " -> " + successEnvs[i] + " (SUCCESS) \n";
            }
          }
          if (failed.length) {
            for (var i = 0, n = failedEnvs.length; i < n; i ++) {
              text += getProjectNameByEnvName(failedEnvs[i]) + " -> " + failedEnvs[i] + " (FAILED) \n";
            }
          }
          return text;
        }
        
        while (true) {
          resp = base.GetObjectsByCriteria(appid, session, tableName, criteria, from, count);
          from += count;
          if (resp.result != 0) return resp;
          if (resp.objects.length == 0) break;
          imports = imports.concat(resp.objects);
        }

        for (let i = 0, n = imports.length; i < n; i++) {
          if (imports[i].envName) {
            resp = api.env.control.ExecCmdByGroup(imports[i].envName, userSession, CP, toJSON([{command: "cat /var/lib/jelastic/keys/migrator/status"}]), true, false);
            if (resp.result != 0) return resp;
            if (resp.responses && resp.responses[0] && resp.responses[0].out) {
              out = resp.responses[0].out;
              resp = base.SetProperty(appid, session, tableName, imports[i].id, "status", out);
              if (resp.result != 0) return resp;
              if (out == "SUCCESSFULLY MIGRATED") {
                successEnvs.push(imports[i].envName);
              } else if (out == "MIGRATION FAILED") {
                failedEnvs.push(imports[i].envName);
                
                resp = api.env.control.ExecCmdByGroup(imports[i].envName, userSession, CP, toJSON([{command: "grep '.failed' /home/jelastic/migrator/migrator.log "}]), true, false);
                if (resp.result != 0) return resp;
                if (resp.responses && resp.responses[0] && resp.responses[0].out) {
                  out = resp.responses[0].out;
                  resp = base.SetProperty(appid, session, tableName, imports[i].id, "error", out);
                  if (resp.result != 0) return resp;
                }

                resp = api.billing.subscription.GetSubscriptions({
                  appid: "cluster", 
                  session: userSession, 
                  id: '${settings.subscription}',
                  expandFields: "*"
                });

                if (resp.result != 0) return resp;
                if (resp.array && resp.array[0] && resp.array[0].items && resp.array[0].items[0]) {
                  item = resp.array[0].items[0];

                  if (item.id == parseInt('${settings.subscription}') && item.resources.length) {
                    for (let k = 0, l = item.resources.length; k < l; k++) {
                      subResource = JSON.parse(item.resources[k].resources);
                      
                      if (subResource.length) {
                        for (let m = 0, v = subResource.length; m < v; m++) {
                          if (subResource[m] && subResource[m].name == imports[i].envName) {

                            resp = api.billing.subscription.UninstallProduct(appid, userSession, parseInt('${settings.subscription}'), item.id, item.resources[k].id, item.resources[k].uniqueName.replace(/-.*/, ""));
                            if (resp.result != 0) return resp;
                          }
                        }                        
                      }
                    }
                  }
                }
              }
            }
          }
        }

        let text = formatSuccessText(successEnvs, failedEnvs);

        return { result: 0, text: text }
    - setGlobals:
        successText: ${response.text}
      
  signout:
    script: |
      // Signout
      return jelastic.users.authentication.Signout("cluster", "${globals.userSession}");

  generateReport:
    script: |
        var tableName = "${globals.tableName}";
        var envName = '${settings.envName}';
        var resp = api.data.base.GetObjectsByCriteria(appid, session, tableName);
        var objects = resp.objects;

        var htmlTable = '<table style="width:100%; border-collapse: collapse; border: 1px solid black;">' +
          '<thead><tr>' +
          '<th style="width:5%; border: 1px solid black;">uid</th>' +
          '<th style="width:10%; border: 1px solid black;">envName</th>' +
          '<th style="width:10%; border: 1px solid black;">projectName</th>' +
          '<th style="width:5%; border: 1px solid black;">projectId</th>' +
          '<th style="width:15%; border: 1px solid black;">status</th>' +
          '<th style="width:30%; border: 1px solid black;">error</th>' +
          '</tr></thead>' +
          '<tbody>';

        objects.forEach(function(rowData) {
        htmlTable += '<tr>' +
          '<td style="border: 1px solid black;">' + rowData.uid + '</td>' +
          '<td style="border: 1px solid black;">' + rowData.envName + '</td>' +
          '<td style="border: 1px solid black;">' + rowData.projectName + '</td>' +
          '<td style="border: 1px solid black;">' + rowData.projectId + '</td>' +
          '<td style="border: 1px solid black;">' + rowData.status + '</td>' +
          '<td style="border: 1px solid black;">' + rowData.error + '</td>' +
          '</tr>';
        });

        htmlTable += '</tbody></table>';

        var htmlContent = '<html>' +
          '<head><title>Migration status</title></head>' +
          '<body>' +
          '<h1>Migration status</h1>' +
          htmlTable +
          '</body>' +
          '</html>';
    
        return api.environment.file.Write({
          envName: envName,
          session: session,
          path: "/var/www/webroot/ROOT/index.html",
          nodeGroup: "cp",
          body: htmlTable
        })

success: ${globals.successText}
