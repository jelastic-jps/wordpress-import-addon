type: install
name: Standalone Pro
baseUrl: https://raw.githubusercontent.com/jelastic-jps/wordpress-import-addon/master
  
globals:
  master_env: ${settings.master_env}
  targetUID: ${settings.targetUID}
  wp_admin_pass: ${fn.password(10)}
  db_user: user-${fn.random}
  db_pass: ${fn.password(10)}
  env_name: ${settings.env_name}
  envGroups: "${settings.envGroups}"
  project_id: "${settings.project_id}"
  migration_dir: "/home/jelastic/migrator"
  wpenv_file: "/home/jelastic/migrator/.wpenv"
  projects_file: "/home/jelastic/migrator/projects.json"
  
onInstall:
  - createEnv
  - getMasterId
  - addConfigs
  - installDependencies
  - importProject
  - getProjectName
  - api: env.control.ExecCmdById
    envName: ${globals.env_name}
    nodeId: ${globals.master_id}
    session: ${settings.userSession}
    userName: root
    commandList:
      - command: |-
          [ ! -d /var/lib/jelastic/keys/migrator ] && mkdir -p /var/lib/jelastic/keys/migrator;
          echo "${globals.migrateStatus}" > /var/lib/jelastic/keys/migrator/status;

  - if ('${globals.migrateStatus}' == 'SUCCESSFULLY MIGRATED'): 
    - api: env.control.SetEnvDisplayName
      envName: ${globals.env_name}
      session: ${settings.userSession}
      displayName: ${globals.projectName}

  - if ('${globals.migrateStatus}' == 'MIGRATION FAILED'):
    - api: env.control.SetEnvDisplayName
      envName: ${globals.env_name}
      session: ${settings.userSession}
      displayName: ${globals.projectName}-[FAILED]

actions:
  createEnv:
    script: |
      var resp = jelastic.billing.subscription.InstallProduct({
          appid: 'dashboard', 
          session: '${settings.userSession}', 
          subscriptionId: '${settings.subscriptionId}',
          settings: { 
            "envName": "${globals.env_name}",
            "cdn-addon": "false",
            "php_engine": '${settings.php_engine}',
            "le-addon": "false",
            "success_email": "false",
            "diskLimit": '${settings.diskLimit:20}'
          }      
        });
      if (resp.result != 0) {
        var error = "Result:"+resp.result+" ERROR: " +resp.error;
        return { result: resp.result, onAfterReturn: { responseOut: { "status": "ERROR", "message": error.replace(/'/, '') } } };
      }
      return {result: 0}

  getMasterId:
    - script: |
        var envInfo = jelastic.env.control.GetEnvInfo({ envName: '${globals.env_name}', session: '${settings.userSession}' });
        if (envInfo.result != 0) return envInfo;
        for (var i = 0, k = envInfo.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'cp')
            master_id = k[i].id;
        }       
        return { result : 0, onAfterReturn: { setGlobals: { master_id: master_id } } };

  installDependencies:
    - script: |
        var cmd1 = "grep -a 'AlmaLinux' /etc/system-release && microdnf -y install sshpass || yum install sshpass -y;";
        var cmd2 = "echo 'WordPress migrator add-on logs' > /var/log/migrator.log;";
        var cmd3 = "chown jelastic /var/log/migrator.log;";
        return api.environment.control.ExecCmdById({
          envName: '${globals.env_name}', 
          session: '${settings.userSession}',
          nodeId: '${globals.master_id}',
          userName: "root",
          commandList: toJSON([{"command": cmd1}, {"command": cmd2}, {"command": cmd3}])
        });

  addConfigs:
    - projects_file_content: ${settings.projects_file_content}
      wpenv_file_content: ${settings.wpenv_file_content}
      script: |
        var cmd1 = "[[ -d ${globals.migration_dir} ]] || mkdir ${globals.migration_dir};";
        var cmd2 = "wget ${baseUrl}/scripts/migrator.sh -O ${globals.migration_dir}/migrator.sh;";
        var cmd3 = "echo '" + wpenv_file_content + "'  > ${globals.wpenv_file};";
        var cmd4 = "echo 'PROJECT_NAME=${settings.project_id}' >> ${globals.wpenv_file};";
        var cmd5 = "echo '" + projects_file_content + "'  > ${globals.projects_file};";
        return api.environment.control.ExecCmdById({
          envName: '${globals.env_name}', 
          session: '${settings.userSession}',
          nodeId: '${globals.master_id}', 
          commandList: toJSON([{"command": cmd1}, {"command": cmd2}, {"command": cmd3}, {"command": cmd4}, {"command": cmd5}])
        });

  getProjectName:
    - script: | 
        var cmd1 = "bash ${globals.migration_dir}/migrator.sh getProjectName --instance-id=${globals.project_id}";       
        var resp = api.environment.control.ExecCmdById({
          envName: '${globals.env_name}',
          session: '${settings.userSession}',
          nodeId: '${globals.master_id}', 
          commandList: toJSON([{"command": cmd1}])
        });
        var respOut = JSON.parse(resp.responses[0]).out;
        return { result : 0, onAfterReturn: { setGlobals: { projectName: respOut } } };

  importProject:
    - script: | 
        var migrateStatus = "SUCCESSFULLY MIGRATED";
        var cmd1 = "bash ${globals.migration_dir}/migrator.sh importProject --instance-id=${globals.project_id}";       
        var resp = api.environment.control.ExecCmdById({
          envName: '${globals.env_name}',
          session: '${settings.userSession}',
          nodeId: '${globals.master_id}', 
          commandList: toJSON([{"command": cmd1}])
        });
        if (resp.result != 0)
          migrateStatus = "MIGRATION FAILED"
        try {
          respOut = JSON.parse(resp.responses[0].out) || [];
        } catch (ex) {
          migrateStatus = "MIGRATION FAILED"
        }
        if (respOut.result != 0)
          migrateStatus = "MIGRATION FAILED"

        return { result : 0, onAfterReturn: { setGlobals: { migrateStatus: migrateStatus } } };
        
  responseOut:
    script: |
      var envInfo = jelastic.env.control.GetEnvInfo({
          envName: '${globals.master_env}'
      });
      if (envInfo.result != 0) return envInfo;
      for (var i = 0, k = envInfo.nodes; i < k.length; i++) {
        if (k[i].nodeGroup == 'cp')
          master_id = k[i].id;
      }       
      var cmd = "echo `date` '[${this.status}] Target UID: ${globals.targetUID}, Project name: ${globals.projectName}, Environment name: ${globals.env_name}\n${this.message}' >> /var/log/migrator.log";
        return api.environment.control.ExecCmdById({
          envName: '${globals.master_env}',
          nodeId: master_id, 
          commandList: toJSON([{"command": cmd}])
        });
